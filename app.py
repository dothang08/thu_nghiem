import streamlit as st
import pandas as pd
import plotly.express as px

# Title v√† m√¥ t·∫£
st.title('üå§Ô∏è Dashboard Ph√¢n t√≠ch Ch·∫•t l∆∞·ª£ng Kh√¥ng kh√≠')
st.markdown('·ª®ng d·ª•ng t∆∞∆°ng t√°c hi·ªÉn th·ªã d·ªØ li·ªáu AQI v√† c√°c y·∫øu t·ªë m√¥i tr∆∞·ªùng li√™n quan.')

# Load data
@st.cache_data
def load_data():
    data = pd.read_csv('aqi_selected_cities.csv', parse_dates=['timestamp'])
    data['timestamp'] = pd.to_datetime(data['timestamp'])

    ## Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
    # Chuy·ªÉn c·ªôt temperature sang ki·ªÉu string, lo·∫°i b·ªè "¬∞C" v√† chuy·ªÉn v·ªÅ ki·ªÉu s·ªë float
    data['temperature'] = data['temperature'].astype(str).str.replace('¬∞C', '', regex=False)
    data['temperature'] = pd.to_numeric(data['temperature'], errors='coerce')

    # T∆∞∆°ng t·ª± v·ªõi c·ªôt humidity (n·∫øu ch·ª©a d·∫•u "%")
    data['humidity'] = data['humidity'].astype(str).str.replace('%', '', regex=False)
    data['humidity'] = pd.to_numeric(data['humidity'], errors='coerce')

    # T∆∞∆°ng t·ª± v·ªõi c·ªôt wind_speed " km/h"
    data['wind_speed'] = data['wind_speed'].astype(str).str.replace(' km/h', '', regex=False)
    data['wind_speed'] = pd.to_numeric(data['wind_speed'], errors='coerce')

    # Chuy·ªÉn ƒë·ªïi ƒë∆°n v·ªã CO cho d·ªØ li·ªáu tr∆∞·ªõc ng√†y 2025-03-07
    data.loc[(data["city"] == "H√† N·ªôi") & (data["timestamp"] <= "2025-03-07"), "co"] = (
    data["co"] / 1145).round(1)

    ## X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu
    # ƒêi·ªÅn gi√° tr·ªã NaN b·∫±ng trung b√¨nh c·ªßa t·ª´ng c·ªôt
    cols_to_fill = ["so2", "co", "pm10", "o3", "no2", "pm25"]
    for col in cols_to_fill:
        data[col] = data[col].fillna(data.groupby("city")[col].transform("mean")).round(1)

    return data

df = load_data()

# Sidebar - Filters
st.sidebar.header('Ch·ªçn tham s·ªë')
city = st.sidebar.selectbox('Ch·ªçn th√†nh ph·ªë:', df['city'].unique())
date_range = st.sidebar.date_input("Kho·∫£ng th·ªùi gian ph√¢n t√≠ch:", [df['timestamp'].min().date(), df['timestamp'].max().date()])

# L·ªçc d·ªØ li·ªáu
start_date, end_date = date_range
filtered_df = df[(df['city'] == city) & (df['timestamp'].dt.date >= start_date) & (df['timestamp'].dt.date <= end_date)]

# Bi·ªÉu ƒë·ªì AQI theo th·ªùi gian
st.header('üìà AQI theo th·ªùi gian')
fig_aqi = px.area(filtered_df, x='timestamp', y='aqi', title='Ch·ªâ s·ªë AQI theo th·ªùi gian', color_discrete_sequence=['#00A8E8'])
st.plotly_chart(fig_aqi)

# Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë √¥ nhi·ªÖm
st.header('üìä Ch·ªâ s·ªë ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ chi ti·∫øt')
pollutants = ['pm25', 'pm10', 'no2', 'o3', 'so2', 'co']
selected_pollutant = st.selectbox('Ch·ªçn ch·ªâ s·ªë:', pollutants)

fig_pollutant = px.area(filtered_df, x='timestamp', y=selected_pollutant, title=f'Ch·ªâ s·ªë {selected_pollutant.upper()} theo th·ªùi gian', color_discrete_sequence=['#72B01D'])
st.plotly_chart(fig_pollutant)

# T∆∞∆°ng quan gi·ªØa AQI v√† y·∫øu t·ªë th·ªùi ti·∫øt
st.header('üîç T∆∞∆°ng quan AQI v√† y·∫øu t·ªë th·ªùi ti·∫øt')
y_factor = st.selectbox('Ch·ªçn y·∫øu t·ªë th·ªùi ti·∫øt:', ['temperature', 'humidity', 'wind_speed'])

fig_corr = px.scatter(
    filtered_df, 
    x=y_factor, 
    y='aqi', 
    opacity=0.6,  # L√†m trong su·ªët ƒë·ªÉ tr√°nh r·ªëi m·∫Øt
    trendline="ols",  # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
    color_discrete_sequence=['#FFA500'],  # M√†u cam n·ªïi b·∫≠t
    title=f'T∆∞∆°ng quan gi·ªØa AQI v√† {y_factor}'
)
fig_corr.update_layout(xaxis_showgrid=True, yaxis_showgrid=True)  # Hi·ªÉn th·ªã l∆∞·ªõi

st.plotly_chart(fig_corr)


# Hi·ªÉn th·ªã d·ªØ li·ªáu th√¥
st.header('üìã B·∫£ng d·ªØ li·ªáu chi ti·∫øt')

# ·∫®n c·ªôt icon n·∫øu t·ªìn t·∫°i
if 'icon' in filtered_df.columns:
    display_df = filtered_df.drop(columns='icon')
else:
    display_df = filtered_df

# Hi·ªÉn th·ªã b·∫£ng sau x·ª≠ l√Ω
st.dataframe(display_df.reset_index(drop=True), use_container_width=True)


# Footer
st.markdown('---')
st.caption('Dashboard ƒë∆∞·ª£c x√¢y d·ª±ng b·∫±ng Streamlit. Copyright DoThang 2025.')
